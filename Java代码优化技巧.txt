Java中的代码优化技巧有很多，以下是一些常见的技巧：

1.使用合适的数据结构：根据具体的应用场景选择合适的数据结构可以显著提高代码的效率。例如，如果需要频繁地查找和删除元素，应该使用HashMap而不是ArrayList。
2.避免使用过大的对象：尽可能地避免创建过大的对象，因为它们会消耗大量的内存和CPU资源。例如，可以限制对象的数量，或者使用更小的对象来代替大的对象。
3.使用字符串构建器（StringBuilder）：在需要拼接大量字符串时，使用字符串构建器（StringBuilder）比使用字符串连接符（+）更高效。
4.避免使用异常：异常处理会消耗大量的CPU资源，因此在代码中应该尽可能地避免使用异常。例如，可以使用if语句来代替try-catch语句。
5.使用缓存：缓存是一种重要的优化技术，可以将经常使用的计算结果保存起来，以避免重复计算。例如，可以使用Guava缓存或者Ehcache等缓存框架。
6.使用多线程：多线程可以有效地利用多核CPU资源，提高代码的执行效率。但是需要注意线程安全问题，避免出现死锁和竞态条件等问题。
7.使用垃圾回收器：Java虚拟机中的垃圾回收器可以自动管理内存，避免内存泄漏问题。但是需要注意调整垃圾回收器的参数，以获得最佳的性能。
8.使用JProfiler等工具进行性能调优：JProfiler等工具可以帮助开发人员检测代码的性能瓶颈，并提供优化建议。

PS：代码优化需要结合具体的场景和需求进行考虑，选择合适的优化策略可以提高代码的效率和性能。